#1. a scatter plot of original data
import os; #provides functions for interacting with the operating system
#print(os.environ.get('QT_API'))
import pandas # this package allows us to work with two-dimensional data rather than one-dimensional data.
import numpy as np
import warnings
warnings.simplefilter('ignore', np.RankWarning) 
#removes the nonrelevant warning when the rank of the coefficient matrix in the least-squares fit is deficient. 
import matplotlib.pyplot as plt # this package allows us to graph data
year=[2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014]
emissions=[7743,8042,8336,8503,8776,8697,9128,9503,9673,9773,9855]
fig = plt.figure()
plt.scatter(year, emissions, label="Data")

#2. LINEAR interpolating polynomial fitting through data
from scipy import interpolate  
#interp1-D as one dimension, not the letter L
P=interpolate.interp1d(year,emissions) #This is just a linear representation, so straight lines draw between the points
linear=plt.plot(year, P(year), label="Linear")
plt.show()

#Degree 5 least squares fitting polynomial
xp=np.linspace(2004,2014) #x interval of both polynomials
P5 = np.poly1d(np.polyfit(year, emissions, 5)) 
#polyfit to find the coeffs, poly1d to write the complete polynome with x and coeffs
print("P5=", P5)
poly5=plt.plot(xp, np.polyval(P5,xp), label="Inter poly Â°5")
#polyval takesthe coeffs of the polynomial and put them in a list

#A cubic spline
from scipy.interpolate import CubicSpline
cs = CubicSpline(year, emissions)
CubicSpline=plt.plot(xp, cs(xp), label="CubicSpline")
plt.legend(loc='lower right', ncol=2)
plt.show() #This will draw the funcions in the graph. I put it at the very end so that all functions and legend are inside the same graph
# We can see that Cubic Spline is much more precise than the cubic polynomial method
